# set Command

## Introduction

When Bash executes a script, it creates a sub-shell.

```bash
$ bash script.sh
```

In the above code, `script.sh` is executed within a sub-shell. This sub-shell is the execution environment of the script, and Bash defaults to various parameters for this environment.

The `set` command is used to modify the runtime parameters of the sub-shell environment. There are more than a dozen parameters that can be customized, and the [official manual](https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html)

By the way, if you run `set` without any arguments in the command line, it will display all environment variables and shell functions.

## set -u

When executing a script, if an undefined variable is encountered, Bash will ignore it by default. In most cases, this is not the behavior developers want; when a variable does not exist, the script should report an error rather than silently continue execution.

`set -u` is used to change this behavior. By adding it at the beginning of the script, an error will be reported and the execution will stop when an undefined variable is encountered.

`-u` has another equivalent form `-o nounset`, and both are interchangeable.

## Bash Error Handling

If there is a command that fails to run (returns a non-zero value) in the script, Bash will continue to execute the following commands by default. In actual development, if a command fails, it is often necessary for the script to stop executing to prevent the accumulation of errors.

`set -e`

However, some non-zero return values of a command may not indicate failure, or developers may want the script to continue executing even if a command fails. In this case, you can temporarily disable `set -e`, and after the command execution, you can re-enable `set -e`.

```bash
set +e
command1
set -e
```

In the above code, `set +e` means to disable the `-e` option, and `set -e` means to re-enable the `-e` option.

Another method is to use `command || true`, which ensures that the script will not terminate execution even if the command fails.

```bash
#!/bin/bash
set -e

foo || true
echo bar
```

In the above code, `true` ensures that this line of the statement will always execute successfully, and the subsequent `echo bar` will be executed.

## set -o pipefail

There is an exception to `set -e`, which is not applicable to pipeline commands.

So-called pipeline commands are multiple sub-commands combined into a large command through the pipeline operator (`|`). Bash takes the return value of the last sub-command as the return value of the entire command. That is to say, as long as the last sub-command does not fail, the pipeline command will always execute successfully, and therefore the commands following it will still be executed, making `set -e` ineffective.

`set -o pipefail` is used to address this situation, where if any sub-command fails, the entire pipeline command fails, and the script will terminate.

```bash
#!/usr/bin/env bash
set -eo pipefail
```

## set -E

Once the `-e` parameter is set, it will cause errors within a function not to be caught by the `trap` command (the `-E` parameter can correct this behavior, allowing functions to also inherit the `trap` command)

```bash
#!/bin/bash
set -e

trap "echo ERR trap fired!" ERR

myfunc()
{
  # 'foo' is a non-existent command
  foo
}

myfunc
```

In the above example, an error occurs when executing the `myfunc` function because it calls a non-existent command `foo`.

```bash
$ bash test.sh
test.sh: line 9: foo: command not found
```

However, due to the setting of `set -e`, the error inside the function is not caught by the `trap` command, and the `-E` parameter needs to be added.

```bash
#!/bin/bash
set -Eeuo pipefail

trap "echo ERR trap fired!" ERR

myfunc()
{
  # 'foo' is a non-existent command
  foo
}

myfunc
```