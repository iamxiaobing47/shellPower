# mktemp Command, trap Command

Sometimes Bash scripts need to create temporary files or directories. A common practice is to create files or directories in the `/tmp` directory, which has many disadvantages. The safest method is to use the `mktemp` command.

## mktemp
The `mktemp` command is designed to safely create temporary files. Although it does not check whether a temporary file exists before creating it, it supports unique filenames and a cleanup mechanism, thus reducing the risk of security attacks.

The temporary filenames generated by the `mktemp` command are random, and the permissions are set to be readable and writable only by the user.

```bash
$ mktemp
/tmp/tmp.4GcsWSG4vj
```

```bash
#!/bin/bash

TMPFILE=$(mktemp)
echo "Our temp file is $TMPFILE"
```

To ensure that the temporary file is deleted when the script exits, the `trap` command can be used to specify the cleanup operation upon exit.

```bash
#!/bin/bash

trap 'rm -f "$TMPFILE"' EXIT

TMPFILE=$(mktemp)
echo "Our temp file is $TMPFILE"
```

## Parameters of mktemp Command

### -d 

The `-d` parameter can create a temporary directory.

```bash
$ mktemp -d
/tmp/tmp.Wcau5UjmN6
```

### -p 

The `-p` parameter can specify the directory where the temporary file is located. The default is to use the directory specified by the `$TMPDIR` environment variable. If this variable is not set, the `/tmp` directory is used.

```bash
$ mktemp -p /home/ruanyf/
/home/ruanyf/tmp.FOKEtvs2H3
```
### -t 

The `-t` parameter can specify the filename template for the temporary file. The template must end with at least three consecutive `X` characters, representing random characters. It is recommended to use at least six `X` characters. The default filename template is `tmp.` followed by ten random characters.

```bash
$ mktemp -t mytemp.XXXXXXX
/tmp/mytemp.yZ1HgZV
```

## trap Command

The `trap` command is used to respond to system signals in Bash scripts.


```bash
$ trap [action] [signal1] [signal2] ...
```

In the above code, "action" is a Bash command, and the commonly used "signals" are as follows.

> - HUP: Number 1, the script is disconnected from the terminal it is in.
> - INT: Number 2, the user presses Ctrl + C, intending to terminate the script.
> - QUIT: Number 3, the user presses Ctrl + Slash, intending to exit the script.
> - KILL: Number 9, this signal is used to kill a process.
> - TERM: Number 15, this is the default signal sent by the `kill` command.
> - EXIT: Number 0, this is not a system signal but a signal specific to Bash scripts. It is generated no matter what the situation is, as long as the script exits.

The `trap` command responds to the `EXIT` signal as follows.

```bash
$ trap 'rm -f "$TMPFILE"' EXIT
```

A common use case for the `trap` command is to specify a cleanup command to be executed upon exit in a Bash script.


If `trap` needs to trigger multiple commands, you can encapsulate them in a Bash function.

```bash
function egress {
  command1
  command2
  command3
}

trap egress EXIT
```