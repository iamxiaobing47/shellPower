# Redirection

## Output Redirection

```bash
command1 > file
```

example:

```bash
ls > 1.txt
```

If you do not want the file contents to be overwritten, you can append to the end of the file using `>>`

## Input Redirection

```bash
command < file
```

example:

```bash
wc -l < 1.txt
#or
wc -l < 1.txt > count.txt
```

## In-depth Explanation of Redirection
In general, every Unix/Linux command opens three files when it runs:

- Standard Input (stdin): The file descriptor for stdin is 0, and Unix programs default to reading data from stdin.
- Standard Output (stdout): The file descriptor for stdout is 1, and Unix programs default to outputting data to stdout.
- Standard Error (stderr): The file descriptor for stderr is 2, and Unix programs write error messages to the stderr stream.

By default, `command > file` redirects stdout to file, and `command < file` redirects stdin to file.

If you want to redirect stderr to file, you can write like this:

```bash
$ command 2>file
```

If you want to redirect both stdout and stderr to file, you can write like this:
```bash
$ command > file 2>&1
#or
$ command >> file 2>&1
```

## /dev/null File

If you want to execute a command and do not want to display the output on the screen, you can redirect the output to /dev/null:

```bash
$ command > /dev/null
```

/dev/null is a special file that discards anything written to it.

If you want to suppress both stdout and stderr, you can write like this:

```bash
$ command > /dev/null 2>&1
```