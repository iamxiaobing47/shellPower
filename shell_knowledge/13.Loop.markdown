# Loops

## While Loop


```bash
while condition; do
  commands
done
```

```bash
#!/bin/bash

number=0
while [ "$number" -lt 10 ]; do
  echo "Number = $number"
  number=$((number + 1))
done
```

## For...In Loop

```bash
for variable in list; do
  commands
done
```

```bash
#!/bin/bash

for i in word1 word2 word3; do
  echo $i
done
```

- The list can be generated by wildcards.

```bash
for i in *.png; do
  ls -l $i
done
```

In the above example, `*.png` will be replaced by all PNG image files in the current directory, and the variable `i` will take on each file in turn.

The list can also be generated by a sub-command.

```bash
#!/bin/bash

count=0
for i in $(cat ~/.bash_profile); do
  count=$((count + 1))
  echo "Word $count ($i) contains $(echo -n $i | wc -c) characters"
done
```

In the above example, the `cat ~/.bash_profile` command will output the contents of the `~/.bash_profile` file, and then by iterating through each word, it calculates the total number of words in the file, as well as the number of characters in each word.

## For Loop

The `for` loop also supports the C-style loop syntax.

```bash
for (( expression1; expression2; expression3 )); do
  commands
done
```

```bash
for (( i=0; i<5; i=i+1 )); do
  echo $i
done
```

## Break, Continue

Bash provides two built-in commands `break` and `continue` to exit the loop from within the loop.

The `break` command immediately terminates the loop, and the program continues to execute statements after the loop block, that is, it no longer executes the remaining loops.

```bash
#!/bin/bash

for number in 1 2 3 4 5 6
do
  echo "number is $number"
  if [ "$number" = "3" ]; then
    break
  fi
done
```

The `continue` command immediately terminates the current round of the loop and starts the next round of the loop.

```bash
while read -p "What file do you want to test?" filename
do
  if [ ! -e "$filename" ]; then
    echo "The file does not exist."
    continue
  fi

  echo "You entered a valid file.."
done
```

## Select Structure

The `select` structure is mainly used to generate a simple menu. Its syntax is basically consistent with the `for...in` loop.

```bash
select name [in list]
do
  commands
done
```

Bash will handle `select` as follows:

1. `select` generates a menu with each item in the list `list`, each with a numerical number in front.
2. Bash prompts the user to choose one and enter its number.
3. After the user enters, Bash will store the content of the item in the variable `name`, and the number of the item in the environment variable `REPLY`. If the user does not enter, just press the enter key, Bash will re-output the menu and let the user choose.
4. Execute the command body `commands`.
5. After execution, go back to step one and repeat this process.

```bash
#!/bin/bash
# select.sh

select brand in Samsung Sony iphone symphony Walton
do
  echo "You have chosen $brand"
done
```

- `select` can be combined with `case` to perform different commands for different items.

```bash
#!/bin/bash

echo "Which Operating System do you like?"

select os in Ubuntu LinuxMint Windows8 Windows10 WindowsXP
do
  case $os in
    "Ubuntu" | "LinuxMint")
      echo "I also use $os."
    ;;
    "Windows8" | "Windows10" | "WindowsXP")
      echo "Why don't you try Linux?"
    ;;
    *)
      echo "Invalid entry."
      break
    ;;
  esac
done
```