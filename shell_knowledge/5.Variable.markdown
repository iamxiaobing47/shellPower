# Variable

## Introduction

Bash variables are divided into two categories: **environment variables** and **user-defined variables**.

### Environment Variables

display all environment variables.

```bash
$ env
$ printenv
```

Here are some common environment variables.

- `BASHPID`: The process ID of the Bash process.
- `BASHOPTS`: The current shell options, which can be modified using the `shopt` command.
- `HOME`: The user's home directory.
- `HOST`: The name of the current host.
- `LANG`: The character set and language encoding, such as `zh_CN.UTF-8`.
- `PATH`: A colon-separated list of directories that will be searched when a command name is entered.
- `PWD`: The current working directory.
- `UID`: The user ID number of the current user.
- `USER`: The username of the current user.

To view the value of a single environment variable, you can use the `printenv` command or the `echo` command.

```bash
$ printenv PATH
$ echo $PATH
```

### Custom Variables

The `set` command can display all variables (**including both environment variables and custom variables**), as well as all Bash functions.

```bash
$ set
```

## Creating Variables

The variable name must follow these rules:

- Composed of letters, numbers, and underscore characters.
- The first character must be a letter or an underscore and cannot be a number.
- Spaces and punctuation are not allowed.

Note, there should be no spaces around the equals sign. If the variable's value contains spaces, it must be enclosed in quotes.

```bash
myvar="hello world"
```

Here are some examples of custom variables.

```bash
a=z                     
b="a string"            
c="a string and $b"     
d="\t\ta string\n"      
e=$(ls -l foo.txt)      
f=$((5 * 7))   
```

## Reading Variables

```bash
$ a=foo

$ echo $a_file
$ echo ${a}_file
```

## Unsetting Variables

The `unset` command is used to delete a variable.

```bash
unset NAME
```

This command is not very useful. Since non-existent Bash variables are all equivalent to an **empty string**, even if the `unset` command deletes a variable, you can still read the variable, and its value will be an empty string.

**Therefore, to delete a variable, you can also set the variable to an empty string.**

## Outputting Variables, the export Command

Variables created by the user are only usable in the current shell, and child shells do not, by default, read the variables defined by the parent shell. To pass a variable to a child shell, you need to use the `export` command. This makes the exported variable an environment variable for the child shell.

```bash
export NAME=value
```

**Note:** If a child shell modifies an inherited variable, it does not affect the parent shell.

## Special Variables

(1) `$?`

`$?` is the exit status of the last command, used to determine whether the last command was executed successfully. 

- `0` succeeded
- `1` failed

```bash
$ ls doesnotexist
ls: cannot access 'doesnotexist': No such file or directory

$ echo $? #1
```

(2) `$$`

`$$` is the process ID of **_the current shell_**.

```bash
$ echo $$
10662
```

This special variable can be used to name temporary files.

```bash
LOGFILE=/tmp/output_log.$$
```

(3) `$0`

`$0` is the name of the current shell 

(4) `$@` and `$#`

`$#` represents the number of script arguments, 

`$@` represents the values of the script arguments.

## Default Values for Variables

Bash provides four special syntaxes related to the default values of variables, which are designed to ensure that variables are not empty.

### ${varname:-word}
```bash
${varname:-word}
```

- If the variable `varname` exists and is not empty, it returns its value; otherwise, it returns `word`. Its purpose is to return a default value.

```bash
${count:-0}
```

### ${varname:=word}

```bash
${varname:=word}
```

- If the variable `varname` exists and is not empty, it returns its value; otherwise, it sets it to `word` and returns `word`. Its purpose is to set the default value of a variable. 

### ${varname:+word}

```bash
${varname:+word}
```

- If the variable name exists and is not empty, it returns `word`; otherwise, it returns an empty value. Its purpose is to test whether the variable exists. For example, `${count:+1}` means that if the variable `count` exists, it returns `1` (indicating `true`), otherwise it returns an empty value.

### ${varname:?message}

```bash
${varname:?message}
```

- If the variable `varname` exists and is not empty, it returns its value; otherwise, it prints `varname: message` and terminates the script execution.

## readonly Command

```bash
$ readonly foo=1
```

## let Command

The `let` command can declare variables and directly execute arithmetic expressions.

```bash
$ let foo=1+2
$ echo $foo #3
```