# wget
`wget` is a non-interactive command-line tool used for downloading files from the network.

**Main Features**:
- Can recursively download entire websites (using the `-mirror` or `-r` option).
- Supports resuming downloads, allowing you to continue downloading from where you left off if the download is interrupted unexpectedly.

**Common Usage**:
- Download a single file:
  ```bash
  wget http://example.com/file.zip
  ```
- Recursively download an entire website:
  ```bash
  wget -r http://example.com
  ```
- Download files from a list:
  ```bash
  wget -i filelist.txt
  ```

## curl
`curl` is a more powerful command-line tool for data transfer. 

**Main Features**:
- Supports a wide array of protocols, including HTTP, HTTPS, FTP, LDAP, DICT, TELNET, etc.
- Can send data to servers (such as POST requests).
- Supports user authentication, cookies, proxies, SSL, etc.
- Can interact with servers, such as sending JSON or XML data.
- Can be used for testing and debugging network services.

```bash
curl [options] [URL]
```

### Common Options

- `-X`: Specify the type of request (such as GET, POST, PUT, etc.).
- `-H`: Add a custom HTTP header.
- `-u`: Provide user authentication information.
- `-d`: Send POST data.
- `-o`: Write output to a file.
- `-O`: Download the remote file's content to a local file with the same name.
- `-I`: Retrieve only the HTTP header information.

### Examples

1. **Retrieve web page content**:
   ```bash
   curl http://example.com
   ```

2. **Download a file**:
   ```bash
   curl -O http://example.com/file.zip
   ```

3. **Send a POST request**:
   ```bash
   curl -X POST -d "param1=value1&param2=value2" http://example.com/resource
   ```

4. **Send a request with an HTTP header**:
   ```bash
   curl -H "X-My-Header: 123" http://example.com
   ```