# Basic Syntax

```
awk [options] 'BEGIN{commands } pattern{ commands } END{ commands }' filename
```

## Variables and Built-in Functions

- `$1`, `$2`, ...: Represent the 1st, 2nd, etc., fields in the input line.
- `NF`: Represents the total number of fields in the current line.
- `NR`: Represents the number of the current line being processed (counting from 1)
- `print`

## Pattern Matching
awk can perform pattern matching, for example:
- `/pattern/`: Matches lines containing the pattern.
- `!/pattern/`: Matches lines not containing the pattern.

```shell
# Print all lines from "John" to "Jane" in the file data.txt
awk '/John/,/Jane/ { print }' data.txt
```

```shell
awk 'match($2, /^[0-9]+$/) { print $2 }' 3.txt
```

```bash
awk '{print}' file1.txt file2.txt
```

```shell
echo '192.168.1.1' | awk -F "." '{print $2}'
168
```

```shell
tom 60 60 60
kitty 90 95 87
jack 72 84 99
$ awk '$2>=90{print $0}' score.txt
kitty 90 95 87
```

```shell
awk 'BEGIN{print "START"} {if($1==0)print 1;else print "no"}END{print "END"}' 4.txt 
```